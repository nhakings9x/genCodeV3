@{
    Layout = "_Layout.Ts";
}

<div id="response-wrap" style="display: flex; height: calc(100vh - 60px); font-size: 14px">
    <div class="left-response" style=" height: 100%; width: 450px">
        <div class="folder-structure">
            <ul class="tree">
                
            </ul>
            @RenderSection("FileTreeItems")
        </div>
    </div>
    @RenderBody()
    <div class="right-response" style="flex: 1; height: 100%; background: #ebebeb; padding: 32px; overflow: hidden; padding-top: 16px">
        <div style="display: flex; flex-direction: column; height: 100%">
            <div class="toolbar-right" style="display: flex; justify-content: start; padding: 16px">
                <button id="btn-copy-code-ts" class="btn btn-success">Copy</button>
            </div>
            <div class="content-right-text" style="flex: 1; height: calc(100% - 70px)">
                <pre id="file-content" style="height: 100%"><code class="language-typescript">
                </code></pre>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).on("dblclick", ".tree .file", function () {
        // Lấy phần tử được nhấp đúp
        const clickedFile = this;

        // Xóa lớp 'active' từ tất cả các tệp
        $('.tree .file').removeClass('active');

        // Thêm lớp 'active' vào tệp được nhấp đúp
        $(clickedFile).addClass('active');

        var id = $(clickedFile).data("id");
        var content = $(clickedFile).data("content")

        showContentVal(content);
    });

    function findContentByFileName(data, id) {
        for (let key in data) {
            let found = data[key].find(item => item.id === id);
            if (found) {
                return found.content;
            }
        }
        return null;
    }

    function activeFileResFirst() {
        const files = document.querySelectorAll('.tree .file');
        if (files) {
            $(files[0]).addClass('active')
            $(files[0]).trigger("dblclick")
        }
    }

    function showContentVal(content) {
        // Xóa toàn bộ nội dung của thẻ <pre>
        $("#file-content").empty();

        if (content == "") {
            // Tạo một thẻ <code> với thông báo "Không có dữ liệu."
            var codeElement = $(`<code class="language-typescript"></code>`).text("Không có dữ liệu.");
            // Thêm thẻ <code> vào thẻ <pre>
            $("#file-content").append(codeElement);
        } else {
            // Tạo một thẻ <code> với nội dung mới
            var codeElement = $(`<code class="language-typescript"></code>`).text(content);
            // Thêm thẻ <code> vào thẻ <pre>
            $("#file-content").append(codeElement);
        }

        // Highlight nội dung của thẻ <code>
        hljs.highlightAll();
    }

    function cleanTreeFile() {
        $("#forms-file-wrap").empty()
        $("#model-file-wrap").empty()
        $("#languagekey-files").empty()
        $(".file-service").remove()
    }

    $("#btn-copy-code-ts").on("click", function () {
        var textToCopy = $('#file-content code').text();

        // Create a temporary textarea element
        var tempTextarea = document.createElement('textarea');
        tempTextarea.value = textToCopy;
        document.body.appendChild(tempTextarea);

        // Select the text
        tempTextarea.select();
        tempTextarea.setSelectionRange(0, 99999); // For mobile devices

        // Copy the text to clipboard
        document.execCommand('copy');

        // Remove the temporary textarea element
        document.body.removeChild(tempTextarea);

        // Optionally, provide feedback to the user
        // alert('Đã copy');
        onShowToast("Đã copy")
    })
</script>